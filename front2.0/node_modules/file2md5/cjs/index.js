"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const spark_md5_1 = __importDefault(require("spark-md5"));
const lodash_noop_1 = __importDefault(require("lodash.noop"));
const file2md5 = function (file, options = {}) {
    const { chunkSize = 2 * 1024 * 1024, raw = false, onProgress } = options;
    const spark = new spark_md5_1.default.ArrayBuffer();
    const fileReader = new FileReader();
    const fileSize = file.size;
    const chunks = Math.ceil(fileSize / chunkSize);
    let currentChunk = 0;
    let progress = 0;
    const loadNext = function () {
        const start = currentChunk * chunkSize;
        const end = start + chunkSize >= fileSize ? fileSize : start + chunkSize;
        fileReader.readAsArrayBuffer(File.prototype.slice.call(file, start, end));
    };
    const abort = function () {
        fileReader.abort();
    };
    const execute = function (resolve, reject) {
        fileReader.addEventListener('load', e => {
            var _a;
            spark.append((_a = e.target) === null || _a === void 0 ? void 0 : _a.result);
            currentChunk++;
            progress = +(currentChunk / chunks).toFixed(2);
            onProgress === null || onProgress === void 0 ? void 0 : onProgress(progress);
            if (currentChunk < chunks) {
                loadNext();
                return;
            }
            // If raw is true, the result as a binary string will be returned instead
            resolve(spark.end(raw));
        });
        fileReader.addEventListener('abort', () => {
            // Resets the internal state of the computation
            spark.reset();
            resolve('');
        });
        fileReader.addEventListener('error', () => {
            // Resets the internal state of the computation
            spark.reset();
            reject(fileReader.error);
        });
        loadNext();
    };
    file2md5.abort = abort;
    return new Promise(execute);
};
file2md5.abort = lodash_noop_1.default;
exports.default = file2md5;
