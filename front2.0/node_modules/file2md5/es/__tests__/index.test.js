var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import file2md5 from '../index';
jest.setTimeout(300000);
describe('file2md5', () => {
    test('test basic usage', () => __awaiter(void 0, void 0, void 0, function* () {
        const file = new window.File([new ArrayBuffer(1024)], 'test.txt');
        const md5 = yield file2md5(file, { chunkSize: 3 * 1024 * 1024 });
        expect(file).not.toBeNull();
        expect(typeof md5).toBe('string');
        expect(md5.length).toBeGreaterThan(0);
    }));
    test('test "onProgress" callback', () => __awaiter(void 0, void 0, void 0, function* () {
        const file = new window.File([new ArrayBuffer(1024)], 'test.txt');
        const onProgress = jest.fn();
        yield file2md5(file, { chunkSize: 3 * 1024 * 1024, onProgress });
        expect(onProgress).toHaveBeenCalled();
    }));
    test('test "raw" property', () => __awaiter(void 0, void 0, void 0, function* () {
        const file = new window.File([new ArrayBuffer(1024)], 'test.txt');
        const md5 = yield file2md5(file, { chunkSize: 3 * 1024 * 1024, raw: true });
        expect(typeof md5).toBe('string');
        expect(md5.length).toBeGreaterThan(0);
    }));
    test('test huge file', () => __awaiter(void 0, void 0, void 0, function* () {
        const file = new window.File([new ArrayBuffer(300 * 1024 * 1024)], 'test.txt');
        const md5 = yield file2md5(file, { chunkSize: 3 * 1024 * 1024 });
        expect(typeof md5).toBe('string');
        expect(md5.length).toBeGreaterThan(0);
    }));
    test('test abort method', () => __awaiter(void 0, void 0, void 0, function* () {
        const file = new window.File([new ArrayBuffer(700 * 1024 * 1024)], 'test.txt');
        const abort = jest.fn().mockImplementation(() => file2md5.abort());
        setTimeout(() => abort(), 1500);
        const md5 = yield file2md5(file, { chunkSize: 3 * 1024 * 1024 });
        expect(abort).toHaveBeenCalled();
        expect(typeof md5).toBe('string');
        expect(md5).toBe('');
    }));
});
